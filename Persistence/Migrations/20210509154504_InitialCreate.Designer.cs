// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Context;

namespace Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210509154504_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0-preview.3.21201.2");

            modelBuilder.Entity("Domain.Entities.HotDogStand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("address");

                    b.Property<Guid>("OperatorId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("HotDogStands");

                    b.HasData(
                        new
                        {
                            Id = new Guid("70f9917f-c66d-46a2-aa21-bfd9a4fe6c17"),
                            Address = "Grimmer's Road",
                            OperatorId = new Guid("3622398d-c8ea-475d-800e-18c76c169939")
                        },
                        new
                        {
                            Id = new Guid("ff213fc9-9545-49e4-8344-eade3591c1c4"),
                            Address = "Fieldfare Banks",
                            OperatorId = new Guid("6bf1323f-4c28-4355-8440-258f796b78cb")
                        },
                        new
                        {
                            Id = new Guid("4ff14256-a670-47d2-9410-d03b7c53654a"),
                            Address = "Imperial Passage",
                            OperatorId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("be5fcf01-498c-4e77-b8e1-545c634fb417"),
                            Address = "Woodville Square",
                            OperatorId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("461715be-00c9-4a47-be4a-c76b73668bb7"),
                            Address = "Lindsey Circle",
                            OperatorId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("4858edf6-9d80-4f6b-8248-3bb849c61477"),
                            Address = "Alexander Banks",
                            OperatorId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Domain.Entities.HotDogStandProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("StandId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StandId");

                    b.ToTable("HotDogStandProduct");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8c32089d-9330-42d1-8fd1-0d9805c0976a"),
                            ProductId = new Guid("44d52564-876b-47d1-9580-c0afca617389"),
                            Quantity = 7,
                            StandId = new Guid("70f9917f-c66d-46a2-aa21-bfd9a4fe6c17")
                        },
                        new
                        {
                            Id = new Guid("6a260edd-129c-446a-81b5-8ca451a81274"),
                            ProductId = new Guid("7ae695fe-697e-46ad-8b8c-8f995ec08d19"),
                            Quantity = 10,
                            StandId = new Guid("70f9917f-c66d-46a2-aa21-bfd9a4fe6c17")
                        },
                        new
                        {
                            Id = new Guid("dca638b3-f4b2-4cfa-b935-0ca72327c3b8"),
                            ProductId = new Guid("3424f816-446d-4bea-bc40-7ef0f785422f"),
                            Quantity = 13,
                            StandId = new Guid("70f9917f-c66d-46a2-aa21-bfd9a4fe6c17")
                        },
                        new
                        {
                            Id = new Guid("b3fdf0bb-91f7-4e73-966e-d0785e4bbe7e"),
                            ProductId = new Guid("44d52564-876b-47d1-9580-c0afca617389"),
                            Quantity = 20,
                            StandId = new Guid("ff213fc9-9545-49e4-8344-eade3591c1c4")
                        },
                        new
                        {
                            Id = new Guid("93fee340-cff2-49ea-baf2-9f3674ae0a6b"),
                            ProductId = new Guid("7ae695fe-697e-46ad-8b8c-8f995ec08d19"),
                            Quantity = 6,
                            StandId = new Guid("ff213fc9-9545-49e4-8344-eade3591c1c4")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid>("OperatorId")
                        .HasColumnType("TEXT")
                        .HasColumnName("operator_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT")
                        .HasColumnName("timesptamp");

                    b.Property<double>("Total")
                        .HasColumnType("REAL")
                        .HasColumnName("total");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("OperatorId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Domain.Entities.OrderProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("TEXT")
                        .HasColumnName("order_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("quantity");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrdersProducts");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("category");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<float>("Price")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("44d52564-876b-47d1-9580-c0afca617389"),
                            Category = "HotDogs",
                            Description = "Basic hot dog with ketchup/mustard",
                            Name = "Hot Dog",
                            Price = 10f
                        },
                        new
                        {
                            Id = new Guid("7ae695fe-697e-46ad-8b8c-8f995ec08d19"),
                            Category = "HotDogs",
                            Description = "Hot dog with caramelized onions and ketchup",
                            Name = "Hot Onion Dog",
                            Price = 12.5f
                        },
                        new
                        {
                            Id = new Guid("3424f816-446d-4bea-bc40-7ef0f785422f"),
                            Category = "HotDogs",
                            Description = "Hot dog with melted gouda cheese and bacon",
                            Name = "Bacon Melt",
                            Price = 15f
                        },
                        new
                        {
                            Id = new Guid("9e6aaf35-34f4-4c94-8db6-e3578a931142"),
                            Category = "Extras",
                            Description = "Regular fries",
                            Name = "Fries",
                            Price = 7.5f
                        },
                        new
                        {
                            Id = new Guid("e385ba99-4967-44ad-89dc-32dabb39422c"),
                            Category = "Drinks",
                            Description = "Coke bottle",
                            Name = "Coke",
                            Price = 5f
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("password");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER")
                        .HasColumnName("role");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9fc728c9-9568-4649-817a-9d8060bde6bf"),
                            Email = "customer@gmail.com",
                            Password = "B6C45863875E34487CA3C155ED145EFE12A74581E27BEFEC5AA661B8EE8CA6DD",
                            Role = 0,
                            Username = "customer"
                        },
                        new
                        {
                            Id = new Guid("71cb42b6-5cde-4a04-abc7-60cbb9ac48fb"),
                            Email = "admin@gmail.com",
                            Password = "8C6976E5B5410415BDE908BD4DEE15DFB167A9C873FC4BB8A81F6F2AB448A918",
                            Role = 3,
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("a9baaf62-38fb-44ca-8e08-0219bbf0a548"),
                            Email = "supplier@gmail.com",
                            Password = "955ED10B73D6265B1ADCF768B94F8DD5D91F33309DB94B6B3AF4EFA822F1D9AF",
                            Role = 2,
                            Username = "supplier"
                        },
                        new
                        {
                            Id = new Guid("3622398d-c8ea-475d-800e-18c76c169939"),
                            Email = "operator1@gmail.com",
                            Password = "941E65AF88E0945C9F7DB5C306B0EF0FC5763DF6BFC9D339FF235195885083A2",
                            Role = 1,
                            Username = "operator1"
                        },
                        new
                        {
                            Id = new Guid("6bf1323f-4c28-4355-8440-258f796b78cb"),
                            Email = "operator2@gmail.com",
                            Password = "6EED3508EEE654F48CC4D57910EAD9310E4B2B386248D56BD40BBF16FCD9A77F",
                            Role = 1,
                            Username = "operator2"
                        });
                });

            modelBuilder.Entity("Domain.Entities.HotDogStandProduct", b =>
                {
                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.HotDogStand", "Stand")
                        .WithMany("StandProducts")
                        .HasForeignKey("StandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Stand");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.HasOne("Domain.Entities.User", "Operator")
                        .WithMany("OperatorOrders")
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("ClientOrders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operator");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.OrderProduct", b =>
                {
                    b.HasOne("Domain.Entities.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.HotDogStand", b =>
                {
                    b.Navigation("StandProducts");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("ClientOrders");

                    b.Navigation("OperatorOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
