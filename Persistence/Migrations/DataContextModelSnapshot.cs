// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Context;

namespace Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0-preview.3.21201.2");

            modelBuilder.Entity("Domain.Entities.HotDogStand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("address");

                    b.HasKey("Id");

                    b.ToTable("HotDogStands");

                    b.HasData(
                        new
                        {
                            Id = new Guid("12bd8fbf-967a-422d-b385-b47aba932514"),
                            Address = "Grimmer's Road"
                        },
                        new
                        {
                            Id = new Guid("6dd91e54-82b9-4a6e-a4f4-076b0d8994d0"),
                            Address = "Fieldfare Banks"
                        },
                        new
                        {
                            Id = new Guid("32e43d6a-bade-454d-8154-2a7bdb859644"),
                            Address = "Imperial Passage"
                        },
                        new
                        {
                            Id = new Guid("42551a0a-6709-43e6-ad91-eceb6e19b844"),
                            Address = "Woodville Square"
                        },
                        new
                        {
                            Id = new Guid("a59a3ee3-ab25-45ac-91e8-bad0b2c9d364"),
                            Address = "Lindsey Circle"
                        },
                        new
                        {
                            Id = new Guid("0a8805cf-66e2-4b14-8ad9-9438cd713fc8"),
                            Address = "Alexander Banks"
                        });
                });

            modelBuilder.Entity("Domain.Entities.HotDogStandProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("StandId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StandId");

                    b.ToTable("HotDogStandProduct");

                    b.HasData(
                        new
                        {
                            Id = new Guid("da123ad9-c972-4d6b-a73a-5bc9ec2c86ba"),
                            ProductId = new Guid("91627bef-b215-4fcb-a639-caba212daf71"),
                            Quantity = 7,
                            StandId = new Guid("12bd8fbf-967a-422d-b385-b47aba932514")
                        },
                        new
                        {
                            Id = new Guid("262a9b55-2ea1-4453-a80d-aba55b3d6016"),
                            ProductId = new Guid("7c323cb5-ff68-48e5-9bee-33efeb01f85d"),
                            Quantity = 10,
                            StandId = new Guid("12bd8fbf-967a-422d-b385-b47aba932514")
                        },
                        new
                        {
                            Id = new Guid("8bfc5c93-626e-419d-9507-f414cc80994b"),
                            ProductId = new Guid("efac8b2a-c966-4b15-83a4-8716855d3b27"),
                            Quantity = 13,
                            StandId = new Guid("12bd8fbf-967a-422d-b385-b47aba932514")
                        },
                        new
                        {
                            Id = new Guid("fbf2c7e6-6cbd-4537-9068-698f6d93d68a"),
                            ProductId = new Guid("91627bef-b215-4fcb-a639-caba212daf71"),
                            Quantity = 20,
                            StandId = new Guid("6dd91e54-82b9-4a6e-a4f4-076b0d8994d0")
                        },
                        new
                        {
                            Id = new Guid("535b43aa-3ac6-4c14-9a6d-73c4f8861d11"),
                            ProductId = new Guid("7c323cb5-ff68-48e5-9bee-33efeb01f85d"),
                            Quantity = 6,
                            StandId = new Guid("6dd91e54-82b9-4a6e-a4f4-076b0d8994d0")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid>("OperatorId")
                        .HasColumnType("TEXT")
                        .HasColumnName("operator_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT")
                        .HasColumnName("timesptamp");

                    b.Property<double>("Total")
                        .HasColumnType("REAL")
                        .HasColumnName("total");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("OperatorId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Domain.Entities.OrderProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("TEXT")
                        .HasColumnName("order_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("quantity");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrdersProducts");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("category");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<float>("Price")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("91627bef-b215-4fcb-a639-caba212daf71"),
                            Category = "HotDogs",
                            Description = "Basic hot dog with ketchup/mustard",
                            Name = "Hot Dog",
                            Price = 10f
                        },
                        new
                        {
                            Id = new Guid("7c323cb5-ff68-48e5-9bee-33efeb01f85d"),
                            Category = "HotDogs",
                            Description = "Hot dog with caramelized onions and ketchup",
                            Name = "Hot Onion Dog",
                            Price = 12.5f
                        },
                        new
                        {
                            Id = new Guid("efac8b2a-c966-4b15-83a4-8716855d3b27"),
                            Category = "HotDogs",
                            Description = "Hot dog with melted gouda cheese and bacon",
                            Name = "Bacon Melt",
                            Price = 15f
                        },
                        new
                        {
                            Id = new Guid("09727a40-bd9b-4bc7-83cc-0e64c9d75e9c"),
                            Category = "Extras",
                            Description = "Regular fries",
                            Name = "Fries",
                            Price = 7.5f
                        },
                        new
                        {
                            Id = new Guid("b9c775d4-b160-4528-aced-dc36e3110133"),
                            Category = "Drinks",
                            Description = "Coke bottle",
                            Name = "Coke",
                            Price = 5f
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("password");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER")
                        .HasColumnName("role");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8af2b5c0-a6fe-4c49-a748-9ec50e833d02"),
                            Email = "customer@gmail.com",
                            Password = "B6C45863875E34487CA3C155ED145EFE12A74581E27BEFEC5AA661B8EE8CA6DD",
                            Role = 0,
                            Username = "customer"
                        },
                        new
                        {
                            Id = new Guid("4a14a992-0c7d-472b-92e4-082e525a7c47"),
                            Email = "admin@gmail.com",
                            Password = "8C6976E5B5410415BDE908BD4DEE15DFB167A9C873FC4BB8A81F6F2AB448A918",
                            Role = 3,
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("e0798259-73a2-460a-84a6-c34b97ea024d"),
                            Email = "operator@gmail.com",
                            Password = "06E55B633481F7BB072957EABCF110C972E86691C3CFEDABE088024BFFE42F23",
                            Role = 1,
                            Username = "operator"
                        },
                        new
                        {
                            Id = new Guid("70f1a609-a6f2-4152-9dd7-9246f6502a27"),
                            Email = "supplier@gmail.com",
                            Password = "955ED10B73D6265B1ADCF768B94F8DD5D91F33309DB94B6B3AF4EFA822F1D9AF",
                            Role = 2,
                            Username = "supplier"
                        });
                });

            modelBuilder.Entity("Domain.Entities.HotDogStandProduct", b =>
                {
                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.HotDogStand", "Stand")
                        .WithMany("StandProducts")
                        .HasForeignKey("StandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Stand");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.HasOne("Domain.Entities.User", "Operator")
                        .WithMany("OperatorOrders")
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("ClientOrders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operator");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.OrderProduct", b =>
                {
                    b.HasOne("Domain.Entities.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.HotDogStand", b =>
                {
                    b.Navigation("StandProducts");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("ClientOrders");

                    b.Navigation("OperatorOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
