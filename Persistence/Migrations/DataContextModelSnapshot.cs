// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Context;

namespace Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("Domain.Entities.HotDogStand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("address");

                    b.HasKey("Id");

                    b.ToTable("HotDogStands");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1d597806-7b37-4472-95c9-764b110da867"),
                            Address = "Grimmer's Road"
                        },
                        new
                        {
                            Id = new Guid("7b2c1346-1969-4cee-8a5d-22ba2621145d"),
                            Address = "Fieldfare Banks"
                        },
                        new
                        {
                            Id = new Guid("71a6f687-ce9b-432c-96d7-3721d4f8fdde"),
                            Address = "Imperial Passage"
                        },
                        new
                        {
                            Id = new Guid("19cf4e8b-a637-40e5-b64e-0e7c515c7d62"),
                            Address = "Woodville Square"
                        },
                        new
                        {
                            Id = new Guid("ba79e9cd-eb4e-4ffb-a546-7f21a8c5fac4"),
                            Address = "Lindsey Circle"
                        },
                        new
                        {
                            Id = new Guid("c9b52335-fac9-4fd6-95e0-8ccdb9ea8840"),
                            Address = "Alexander Banks"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid>("OperatorId")
                        .HasColumnType("TEXT")
                        .HasColumnName("operator_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT")
                        .HasColumnName("timesptamp");

                    b.Property<double>("Total")
                        .HasColumnType("REAL")
                        .HasColumnName("total");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("OperatorId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Domain.Entities.OrderProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("TEXT")
                        .HasColumnName("order_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("quantity");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrdersProducts");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("category");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<float>("Price")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f6185ca-1e9a-457e-9f0c-99121fa92cd3"),
                            Category = "HotDogs",
                            Description = "Basic hot dog with ketchup/mustard",
                            Name = "Hot Dog",
                            Price = 10f
                        },
                        new
                        {
                            Id = new Guid("b219d7b3-a868-421e-8f51-3dfeaee20a4b"),
                            Category = "HotDogs",
                            Description = "Hot dog with caramelized onions and ketchup",
                            Name = "Hot Onion Dog",
                            Price = 12.5f
                        },
                        new
                        {
                            Id = new Guid("2c8e6a1c-6109-46b9-8004-662d76c9e9bf"),
                            Category = "HotDogs",
                            Description = "Hot dog with melted gouda cheese and bacon",
                            Name = "Bacon Melt",
                            Price = 15f
                        },
                        new
                        {
                            Id = new Guid("b134cb00-8415-4d89-81e9-cbe1216e71f0"),
                            Category = "Extras",
                            Description = "Regular fries",
                            Name = "Fries",
                            Price = 7.5f
                        },
                        new
                        {
                            Id = new Guid("0ee7d70d-32cd-4ece-99f0-9e7d0ecb6783"),
                            Category = "Drinks",
                            Description = "Coke bottle",
                            Name = "Coke",
                            Price = 5f
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("password");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER")
                        .HasColumnName("role");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f289e705-1c90-4510-921e-1b98a7f11f08"),
                            Email = "customer@gmail.com",
                            Password = "B6C45863875E34487CA3C155ED145EFE12A74581E27BEFEC5AA661B8EE8CA6DD",
                            Role = 0,
                            Username = "customer"
                        },
                        new
                        {
                            Id = new Guid("d39a8d41-3dda-4498-8d9d-db365744220a"),
                            Email = "admin@gmail.com",
                            Password = "8C6976E5B5410415BDE908BD4DEE15DFB167A9C873FC4BB8A81F6F2AB448A918",
                            Role = 3,
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("39b365ea-b521-4d6d-b8ec-abe494f19819"),
                            Email = "operator@gmail.com",
                            Password = "06E55B633481F7BB072957EABCF110C972E86691C3CFEDABE088024BFFE42F23",
                            Role = 1,
                            Username = "operator"
                        },
                        new
                        {
                            Id = new Guid("a9d3e8ec-7716-428f-bb70-71496ddba384"),
                            Email = "supplier@gmail.com",
                            Password = "955ED10B73D6265B1ADCF768B94F8DD5D91F33309DB94B6B3AF4EFA822F1D9AF",
                            Role = 2,
                            Username = "supplier"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.HasOne("Domain.Entities.User", "Operator")
                        .WithMany("OperatorOrders")
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("ClientOrders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operator");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.OrderProduct", b =>
                {
                    b.HasOne("Domain.Entities.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("ClientOrders");

                    b.Navigation("OperatorOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
