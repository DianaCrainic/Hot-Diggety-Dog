// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAPI.Data;

namespace WebAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.4");

            modelBuilder.Entity("WebAPI.Entities.HotDogStand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("address");

                    b.HasKey("Id");

                    b.ToTable("HotDogStands");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d45045d7-0d2c-44b0-97f5-f1b11ed98dff"),
                            Address = "Grimmer's Road"
                        },
                        new
                        {
                            Id = new Guid("6e4f7be7-1b8f-4d85-9498-f4eae295f451"),
                            Address = "Fieldfare Banks"
                        },
                        new
                        {
                            Id = new Guid("2124d56f-e724-4d5a-a873-d06945af2336"),
                            Address = "Imperial Passage"
                        },
                        new
                        {
                            Id = new Guid("573fff02-9a30-4d57-b2e1-6bb9ce89b1a6"),
                            Address = "Woodville Square"
                        },
                        new
                        {
                            Id = new Guid("18b5105a-bd83-43b0-867b-112be45b4e30"),
                            Address = "Lindsey Circle"
                        },
                        new
                        {
                            Id = new Guid("eae26977-6799-440e-8088-e8cf1e54abe5"),
                            Address = "Alexander Banks"
                        });
                });

            modelBuilder.Entity("WebAPI.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid>("OperatorId")
                        .HasColumnType("TEXT")
                        .HasColumnName("operator_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT")
                        .HasColumnName("timesptamp");

                    b.Property<double>("Total")
                        .HasColumnType("REAL")
                        .HasColumnName("total");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("OperatorId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("WebAPI.Entities.OrderProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("TEXT")
                        .HasColumnName("order_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("quantity");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrdersProducts");
                });

            modelBuilder.Entity("WebAPI.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("category");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<float>("Price")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("99fca172-ce7a-40b4-870c-febb3d23c0c0"),
                            Category = "HotDogs",
                            Description = "Basic hot dog with ketchup/mustard",
                            Name = "Hot Dog",
                            Price = 10f
                        },
                        new
                        {
                            Id = new Guid("5b4d64d9-b150-47bb-b852-a34e5b6a1bf6"),
                            Category = "HotDogs",
                            Description = "Hot dog with caramelized onions and ketchup",
                            Name = "Hot Onion Dog",
                            Price = 12.5f
                        },
                        new
                        {
                            Id = new Guid("c94e970e-4804-4bec-aeee-184c15450fbf"),
                            Category = "HotDogs",
                            Description = "Hot dog with melted gouda cheese and bacon",
                            Name = "Bacon Melt",
                            Price = 15f
                        },
                        new
                        {
                            Id = new Guid("973a2600-e3d1-4c7e-ab49-247fcfe99e09"),
                            Category = "Extras",
                            Description = "Regular fries",
                            Name = "Fries",
                            Price = 7.5f
                        },
                        new
                        {
                            Id = new Guid("7a16889a-3309-4471-b37d-a9098048c8d3"),
                            Category = "Drinks",
                            Description = "Coke bottle",
                            Name = "Coke",
                            Price = 5f
                        });
                });

            modelBuilder.Entity("WebAPI.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("password");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER")
                        .HasColumnName("role");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5aabb1a0-b316-4281-9e28-fc5a0a7947cd"),
                            Email = "customer@gmail.com",
                            Password = "B6C45863875E34487CA3C155ED145EFE12A74581E27BEFEC5AA661B8EE8CA6DD",
                            Role = 0,
                            Username = "customer"
                        },
                        new
                        {
                            Id = new Guid("1dc9fd95-b148-4ec3-b765-2e5eb4881094"),
                            Email = "admin@gmail.com",
                            Password = "8C6976E5B5410415BDE908BD4DEE15DFB167A9C873FC4BB8A81F6F2AB448A918",
                            Role = 3,
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("5a9151ba-16f3-4f5f-8ac1-1f39d6ab357b"),
                            Email = "operator@gmail.com",
                            Password = "06E55B633481F7BB072957EABCF110C972E86691C3CFEDABE088024BFFE42F23",
                            Role = 1,
                            Username = "operator"
                        },
                        new
                        {
                            Id = new Guid("b60f2f68-612a-4607-9174-e0735d594d40"),
                            Email = "supplier@gmail.com",
                            Password = "955ED10B73D6265B1ADCF768B94F8DD5D91F33309DB94B6B3AF4EFA822F1D9AF",
                            Role = 2,
                            Username = "supplier"
                        });
                });

            modelBuilder.Entity("WebAPI.Entities.Order", b =>
                {
                    b.HasOne("WebAPI.Entities.User", "Operator")
                        .WithMany("OperatorOrders")
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Entities.User", "User")
                        .WithMany("ClientOrders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operator");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAPI.Entities.OrderProduct", b =>
                {
                    b.HasOne("WebAPI.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebAPI.Entities.User", b =>
                {
                    b.Navigation("ClientOrders");

                    b.Navigation("OperatorOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
